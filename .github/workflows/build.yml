name: Build and deployment
on: [push, pull_request]
jobs:
  job1:
    environment:
      name: test
    env:
      db_host: ${{secrets.db_host}}
      db_port: ${{secrets.db_port}}
      db_password: ${{secrets.db_password}}
      db_name: ${{secrets.db_name}}
      db_username: ${{secrets.db_username}}
      secret_key: ${{secrets.secret_key}}
      algorithm: ${{secrets.algorithm}}
      expire: ${{secrets.expire}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DB_PASSWORD}}
          POSTGRES_DB: fastapi_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2 #this action is taken from github action that automatically pulls the repo
      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install dependencies
        run: pip install -r requirements.txt
      - name: Installing pytest
        run: |
          pip install pytest
          pytest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: myapp\Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
#pull the repo
#install dependencies
#run tests
